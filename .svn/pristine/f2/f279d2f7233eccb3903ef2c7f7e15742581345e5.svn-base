package com.sy.mobile.control;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.ImageView;
import android.widget.LinearLayout;

import java.util.List;
import java.util.Map;

import com.sy.mobile.analytical.ScreenTools;
import com.sy.mobile.picture.ImagePagerActivity;


/**
 * 根据view大小自适应view //未成功
 */
public class Accordinglayout extends ViewGroup {

    /**
     * 图片之间的间隔
     */
    private int gap = 5;
    /**
     * 列
     */
    private int columns;//
    /**
     * 行
     */
    private int rows;//
    private List<View> listData;
    private int totalWidth;
    Context context;

    public Accordinglayout(Context context) {
        super(context);
        ScreenTools screenTools=ScreenTools.instance(getContext());
        totalWidth=screenTools.getScreenWidth()-screenTools.dip2px(80);
        this.context = context;
    }

    public Accordinglayout(Context context, AttributeSet attrs) {
        super(context, attrs);
        ScreenTools screenTools=ScreenTools.instance(getContext());
        totalWidth=screenTools.getScreenWidth()-screenTools.dip2px(80);
        this.context = context;
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    }

    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {

    }
    private void layoutChildrenView(){
        int childrenCount = listData.size();

//        int singleWidth = (totalWidth - gap * (3 - 1)) / 3;
//        int singleHeight = singleWidth;
        int singleWidth = getChildAt(0).getWidth();
        int singleHeight = getChildAt(0).getHeight();

        //根据子view数量确定高度
        ViewGroup.LayoutParams params = new LinearLayout.LayoutParams(
        		LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
        params.height = singleHeight * rows + gap * (rows - 1);
        setLayoutParams(params);

        for (int i = 0; i < childrenCount; i++) {
            View childrenView = getChildAt(i);
//            childrenView.setImageUrl(listData.get(i));
            int[] position = findPosition(i);
            int left = (singleWidth + gap) * position[1];
            int top = (singleHeight + gap) * position[0];
            int right = left + singleWidth;
            int bottom = top + singleHeight;

            childrenView.layout(left, top, right, bottom);
        }

    }


    private int[] findPosition(int childNum) {
        int[] position = new int[2];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                if ((i * columns + j) == childNum) {
                    position[0] = i;//行
                    position[1] = j;//列
                    break;
                }
            }
        }
        return position;
    }

    public int getGap() {
        return gap;
    }
    
    /**
     * 设置控件间隔
     * @param gap
     */
    public void setGap(int gap) {
        this.gap = gap;
    }

    /**
     * 初始化
     * @param lists
     */
    public void setViewData(List<View> lists) {
        if (lists == null || lists.isEmpty()) {
            return;
        }
        for (int j = 0; j < lists.size(); j++) {
        	addView(lists.get(j),generateDefaultLayoutParams());
		}
      //初始化布局
        generateChildrenLayout(lists.get(0),lists.size());
        listData = lists;
    }


    /**
     * 根据view大小确定行列数量
     * @param size
     */
    private void generateChildrenLayout(final View view,final int size) {
//    	ViewTreeObserver vto2 = view.getViewTreeObserver();    
//	    vto2.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
//			
//			@Override
//			public void onGlobalLayout() {
//				// TODO Auto-generated method stub
//				view.getViewTreeObserver().removeGlobalOnLayoutListener(this);
//				
//				int ddd = view.getWidth();
//				columns = ddd==0?0:totalWidth / view.getWidth();
//				int aa = (size / columns)+ (size % columns>0?1:0);
//		    	rows = aa;
//		    	layoutChildrenView();
//			}
//		});
    	
    }

}
