package com.sy.mobile.control;

import android.content.Context;
import android.graphics.Color;
import android.graphics.drawable.GradientDrawable;
import android.util.AttributeSet;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.example.tools.R;
import com.sy.mobile.analytical.ScreenTools;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 选择按钮控件 可用于自动换行
 * Created by admin on 2018/3/13.
 */

public class ChoiceControl extends ViewGroup {
    private int totalWidth;
    Context context;
    private List<Map<String, String>> listData;
    int PADDING_HOR = 10;//水平方向padding
    int PADDING_VERTICAL = 5;//垂直方向padding
    /**
     * 图片之间的间隔
     */
    private int gap = 5;
    //一行有几列 -1为自动
    public final static int automatic = -1;
    //一行显示几列
    private int column;
    private int rows;
    //当前选择了哪些
//    Map<Integer,Boolean> mapIsSelect = new HashMap<>();
    int selectInt = 0;
    //是否可多选
//    boolean isMany;
    //多选的个数(默认3个)
//    int manySum = 2;
    //选中的背景颜色(默认红色)
    int selBackColor;
    //未选中的背景色
    int not_selBackColor;
    //选中的字体颜色(默认白色)
    int selTextColor;
    //未选中的字体颜色
    int not_selTextColor;
    //按钮集合
    TextView[] textViews;
    //名字key
    String nameKey;

    public ChoiceControl(Context context) {
        super(context);
        init(context);
    }

    public ChoiceControl(Context context, AttributeSet attrs) {
        super(context, attrs);
        init(context);
    }

    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        int childCount = getChildCount();
        int autualWidth = r - l;
        int x = 0;// 横坐标开始
        int y = 0;//纵坐标开始
        int rows = 1;
        for (int i = 0; i < childCount; i++) {
            View view = getChildAt(i);
//            view.setBackgroundColor(Color.GREEN);
            int width = view.getMeasuredWidth();
            int height = view.getMeasuredHeight();
            x += width + (i == 0 ? 0 : gap);
            //单个控件加起来的宽度大于父控件的宽度 就换行
            if (x - (gap * 2) > autualWidth) {
                x = width;
                rows++;
            }
            //控件的高度等于行数乘单个控件高度+间隔
            y = rows * (height + gap);
            //减去第一个的行距
            y = y - gap;
//            if(i==0){
//                view.layout(x-width-gap, y-height, x-gap, y);
//            }else{
            view.layout(x - width, y - height, x, y);
//            }
        }
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int x = 0;//横坐标
        int y = 0;//纵坐标
        int rows = 1;//总行数
        int specWidth = MeasureSpec.getSize(widthMeasureSpec);
        int actualWidth = specWidth - gap * 2;//实际宽度
        int childCount = getChildCount();
        for (int index = 0; index < childCount; index++) {
            View child = getChildAt(index);
//            child.setPadding(PADDING_HOR, PADDING_VERTICAL, PADDING_HOR, PADDING_VERTICAL);
            child.measure(MeasureSpec.UNSPECIFIED, MeasureSpec.UNSPECIFIED);
            int width = child.getMeasuredWidth();
            int height = child.getMeasuredHeight();
            x += width + gap;
            //宽度减去左右两个间隔
            if (x - (gap * 2) > actualWidth) {//换行
                x = width;
                rows++;
            }
            //总高度 行数加子控件高度 加 间隔
            y = rows * (height + gap);
        }
        //减去第一个的行距
        y = y - gap;
        setMeasuredDimension(actualWidth, y);
    }

    private void init(Context context) {
        ScreenTools screenTools = ScreenTools.instance(getContext());
        totalWidth = screenTools.getScreenWidth() - screenTools.dip2px(80);
        this.context = context;
        selBackColor = Color.parseColor("#F95048");
        not_selBackColor = Color.parseColor("#EBEBEB");
        selTextColor = Color.parseColor("#FFFFFF");
        not_selTextColor = Color.parseColor("#999999");
        gap = screenTools.dip2px(gap);
//        PADDING_HOR = screenTools.dip2px(PADDING_HOR);
//        PADDING_VERTICAL = screenTools.dip2px(PADDING_HOR);
    }

    /**
     * 设置颜色
     *
     * @param selBackColor
     * @param not_selBackColor
     * @param not_selTextColor
     * @param selTextColor
     */
    public void setColor(int selBackColor, int not_selBackColor, int not_selTextColor, int selTextColor) {
        if (selBackColor != -1)
            this.selBackColor = selBackColor;
        if (not_selBackColor != -1)
            this.not_selBackColor = not_selBackColor;
        if (not_selTextColor != -1)
            this.not_selTextColor = not_selTextColor;
        if (selTextColor != -1)
            this.selTextColor = selTextColor;
    }

    /**
     * 是否能多选
     *
     * @param isMany
     */
//    public void setIsMany(boolean isMany){
//        this.isMany = isMany;
//    }

    public interface OnclickView {
        void onClick(Map<String, String> map);
    }

    OnclickView onclickView;

    public void setOnclickView(OnclickView onclickView) {
        this.onclickView = onclickView;
    }

    /**
     * 获取图片的间隔
     *
     * @return
     */
    public int getGap() {
        return gap;
    }

    /**
     * 设置图片的间隔
     *
     * @param gap
     */
    public void setGap(int gap) {
        ScreenTools screenTools = ScreenTools.instance(getContext());
        this.gap = screenTools.dip2px(gap);
    }

    public void setHW(int PADDING_HOR, int PADDING_VERTICAL) {
        ScreenTools screenTools = ScreenTools.instance(getContext());
        this.PADDING_HOR = PADDING_HOR;
        this.PADDING_VERTICAL = PADDING_VERTICAL;
    }

    /**
     * 名字的key
     *
     * @param nameKey
     */
    public void setName(String nameKey) {
        this.nameKey = nameKey;
    }

    /**
     * 多选的个数
     * @param manySum
     */
//    public void setManySum(int manySum){
//        this.manySum = manySum;
//    }

    /**
     * 根据内容生成相应的按钮
     *
     * @param lists
     */
    public void setDatas(final List<Map<String, String>> lists) {
        if (lists == null || lists.isEmpty()) {
            return;
        }
        textViews = new TextView[lists.size()];
        //根据内容生成相应的控件
        for (int i = 0; i < lists.size(); i++) {
            Map<String, String> map = lists.get(i);
            View view = LayoutInflater.from(context).inflate(R.layout.choice_text, null);
            final TextView test = (TextView) view.findViewById(R.id.text1);
            String sss = map.get(nameKey == null ? "name" : nameKey);
            test.setText(sss);
            //默认选择第一个
            if (i != 0) {
                GradientDrawable myGrad = (GradientDrawable) test.getBackground();
                myGrad.setColor(not_selBackColor);
                test.setTextColor(not_selTextColor);
            } else {
                GradientDrawable myGrad = (GradientDrawable) test.getBackground();
                myGrad.setColor(selBackColor);
                test.setTextColor(selTextColor);
            }
            textViews[i] = test;
            final int testint = i;
            test.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View v) {
                    selectButton(testint);
                }
            });
            addView(view);
        }
        listData = lists;
//        layoutChildrenView();
    }

    /**
     * 点击控件
     *
     * @param i
     */
    private void selectButton(int i) {
        //判断是否可以多选
//        if(isMany){
//            //判断可以多选几个
//        }else{
//            mapIsSelect.clear();
//            mapIsSelect.put(i,true);
//        }
        if (onclickView != null)
            onclickView.onClick(listData.get(i));
        //如果已经选择了，在点击则把原来选的消除了
        textViews[selectInt].setTextColor(not_selTextColor);
        GradientDrawable myGrad = (GradientDrawable) textViews[selectInt].getBackground();
        myGrad.setColor(not_selBackColor);
        selectInt = i;
        textViews[selectInt].setTextColor(selTextColor);
        GradientDrawable myGrad2 = (GradientDrawable) textViews[selectInt].getBackground();
        myGrad2.setColor(selBackColor);

    }
}
