package com.sy.mobile.analytical;

import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;

import android.media.MediaRecorder;
import android.os.Environment;
import android.os.Handler;
import android.widget.TextView;

/**
 * 语音录制
 * @author Administrator
 *
 */
public  class SoundMeter {
	static final private double EMA_FILTER = 0.6;

	private MediaRecorder mRecorder = null;
	private double mEMA = 0.0;
	private Timer timer;
	private int i = 0;
	private TextView xisn;
	int audio = MediaRecorder.AudioEncoder.AMR_NB;
	/**
	 * 开始录制
	 * @param name 路径名称
	 */
	public void start(String name,TextView xisn) {
		if (!Environment.getExternalStorageState().equals(
				android.os.Environment.MEDIA_MOUNTED)) {
			return;
		}
		if (mRecorder == null) {
			mRecorder = new MediaRecorder();
			mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
			mRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
			mRecorder.setAudioEncoder(audio);
			mRecorder.setOutputFile(name);
			try {
				mRecorder.prepare();
				mRecorder.start();
				if(timer!=null){
					timer.cancel();
					timer = null;
				}
				this.xisn = xisn;
				i = 0;
				timer = new Timer();
				timer.schedule(new TimerTask() {

					@Override
					public void run() {
						// TODO Auto-generated method stub
						han.sendEmptyMessage(0);
					}
				}, 0,1000);
				mEMA = 0.0;
			} catch (IllegalStateException e) {
				System.out.print(e.getMessage());
			} catch (IOException e) {
				System.out.print(e.getMessage());
			}

		}
	}
	Handler han = new Handler(){
		public void handleMessage(android.os.Message msg) {
			if(i!=60){
				i++;
				xisn.setText(i+" 〃");
			}else{
				stop();
				i = 0;
			}
		};
	};
	/**
	 * 停止录音
	 * @return 录音的秒数
	 */
	public int stop() {
		int ii = i;
		if (mRecorder != null) {
			mRecorder.stop();
			mRecorder.release();
			mRecorder = null;
		}
		if(timer!=null){
			timer.cancel();
			timer = null;
		}
		i = 0;
		return ii;
	}

	public void pause() {
		if (mRecorder != null) {
			mRecorder.stop();
		}
	}
	/**
	 * 开始
	 */
	public void start() {
		if (mRecorder != null) {
			mRecorder.start();
		}
	}
	/**
	 * 获取录音音量
	 * @return
	 */
	public double getAmplitude() {
		if (mRecorder != null)
			return (mRecorder.getMaxAmplitude() / 2700.0);
		else
			return 0;
	}

	/**
	 * 设置音频编码器
	 * @param audio
	 */
	public void setAudioEncoder(int audio){
		this.audio = audio;
	}

	public double getAmplitudeEMA() {
		double amp = getAmplitude();
		mEMA = EMA_FILTER * amp + (1.0 - EMA_FILTER) * mEMA;
		return mEMA;
	}
}
