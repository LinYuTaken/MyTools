package com.tool.pay;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Random;

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.FragmentActivity;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Toast;

import com.alipay.sdk.app.PayTask;

/**
 * 支付宝支付
 * @author Administrator
 *
 */
public class PayDemoActivity{

	//商户PID
	public String PARTNER = "2088811360688425";
	//商户收款账号
	public String SELLER = "xfqh@lzlj.com";
	//商户私钥，pkcs8格式
	public String RSA_PRIVATE = "MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAPC7pd7dipyNwrtgrr+CXoBaKiwhWipFlDnMA1FbUqObz28NAjcF7lwhN4eXV0aQf9FDiZ3SzuIH0IahU/2eOOpv7zlhw+JsXGDlOAyMFEnQjvzuu8jU+MbNSwutmrsb9W3YwmQ/+RZxhLhDSco8HMl1O4v+x1tbAR2mza9GK/ahAgMBAAECgYB505zXsmoJXDxmM0F8LW/BqN+awa4tolSnAzXSoFKr9Zf+bSjny5qbCTxe5BoI3euxbWphcmO8Q5Ql7dLhkIbgMktUuHlbQjnVRugQaMoxpK0Cf/yO+G47vibNgvXqsV58/Q45Tp5uvjCgUPC2tCSzn67yDLW4TX2XgNq5GuqYoQJBAPppqPXtKxThWFo7NBnFzkVbb6ILTGLPtT5g6VMbJKaW6qlvkbEN5FBDlnFJANysP7nm56Ys8O0UEBiA7kZaktUCQQD2GrKttb5mXo4WRRUzr/uDjgWkgVEyqB4q7+kRGPZA7zCc+22TOlFi0oS/RPoOWdy0kIqhQPp/in4Hrt/8MUKdAkEA5MlGgrJWqzQbygzPVEDCbeHVg4K5HopROJXId5KUENRPv9BclxxvHdoyiHw/ml6RtqK9wLjMwn6TGiAqEwNLpQJBAIij7B7ccJlf2F3u/0WSaP/yw5lBn3aTtyQ5zdqLVHZbF0+hnYYH9BX9Mm0L/BYpuIucUQwVCr/zgeP8KSpZo1UCQQCEyFT5qZFL6YT1U4A+TGZ1Dnh1PVfGyNBF7K7y6Nf5MPoT7QlSk5TyDIiuXLZjmvsls9pbcHCbv3yWDksk1VKr";
	//支付宝公钥
	public String RSA_PUBLIC = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDwu6Xe3YqcjcK7YK6/gl6AWiosIVoqRZQ5zANRW1Kjm89vDQI3Be5cITeHl1dGkH/RQ4md0s7iB9CGoVP9njjqb+85YcPibFxg5TgMjBRJ0I787rvI1PjGzUsLrZq7G/Vt2MJkP/kWcYS4Q0nKPBzJdTuL/sdbWwEdps2vRiv2oQIDAQAB";

	Activity conten;
	//订单号
	String orderId = "";
	//回调url
	String returnUrl = "";
	
	public interface PayResultCont {
		/**
		 * 
		 * @param resultStatus 返回结果
		 * @param orderIdRe 返回流水号
		 */
		public void payResult(String resultStatus ,String orderIdRe);
	}
	
	PayResultCont payresu;
	
	private static final int SDK_PAY_FLAG = 1;

	private static final int SDK_CHECK_FLAG = 2;

	private Handler mHandler = new Handler() {
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case SDK_PAY_FLAG: {
				Log.i("payid", (String) msg.obj);
				PayResult payResult = new PayResult((String) msg.obj);
				
				// 支付宝返回此次支付结果及加签，建议对支付宝签名信息拿签约时支付宝提供的公钥做验签
				String resultInfo = payResult.getResult();
				
				String resultStatus = payResult.getResultStatus();
				payresu.payResult(resultStatus,orderId);
				// 判断resultStatus 为“9000”则代表支付成功，具体状态码代表含义可参考接口文档
//				if (TextUtils.equals(resultStatus, "9000")) {
//					Toast.makeText(conten, "支付成功",
//							Toast.LENGTH_SHORT).show();
//				} else {
//					// 判断resultStatus 为非“9000”则代表可能支付失败
//					// “8000”代表支付结果因为支付渠道原因或者系统原因还在等待支付结果确认，最终交易是否成功以服务端异步通知为准（小概率状态）
//					if (TextUtils.equals(resultStatus, "8000")) {
//						Toast.makeText(conten, "支付结果确认中",
//								Toast.LENGTH_SHORT).show();
//
//					} else {
//						// 其他值就可以判断为支付失败，包括用户主动取消支付，或者系统返回的错误
//						Toast.makeText(conten, "支付失败",
//								Toast.LENGTH_SHORT).show();
//
//					}
//				}
				break;
			}
			case SDK_CHECK_FLAG: {
				Toast.makeText(conten, "检查结果为：" + msg.obj,
						Toast.LENGTH_SHORT).show();
				break;
			}
			default:
				break;
			}
		};
	};
	/**
	 * 
	 * @param partner 商户id
	 * @param seller 商户帐号
	 * @param rsa_private 商户私钥，pkcs8格式
	 * @param rsa_public 公匙
	 * @param cont
	 */
	public PayDemoActivity(String partner,String seller,String rsa_private,String rsa_public,Activity cont,String url){
		PARTNER = partner;
		SELLER = seller;
		RSA_PRIVATE = rsa_private;
		RSA_PUBLIC = rsa_public;
		conten = cont;
		returnUrl = url;
//		ordersRemote_aliPayNotify_url.action
	}
	
	public PayDemoActivity(Activity cont){
		conten = cont;
	}
	
	public void setPayResultCont(PayResultCont paype){
		payresu = paype;
	}
	/**
	 * call alipay sdk pay. 调用SDK支付
	 * @param subject 商品名字
	 * @param body 商品描述
	 * @param price 金额 0.00
	 * @param order 自定义订单号，没有时传null，将随机生成
	 */
	public void pay(String subject, String body, String price,String order) {
		this.orderId = order;
		// 订单
		String orderInfo = getOrderInfo(subject, body, price);

		// 对订单做RSA 签名
		String sign = sign(orderInfo);
		try {
			// 仅需对sign 做URL编码
			sign = URLEncoder.encode(sign, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		// 完整的符合支付宝参数规范的订单信息
		final String payInfo = orderInfo + "&sign=\"" + sign + "\"&"
				+ getSignType();
		Log.i("payInfo", payInfo);
		Runnable payRunnable = new Runnable() {

			@Override
			public void run() {
				// 构造PayTask 对象
				PayTask alipay = new PayTask(conten);
				// 调用支付接口，获取支付结果
				String result = alipay.pay(payInfo);
				
				Message msg = new Message();
				msg.what = SDK_PAY_FLAG;
				msg.obj = result;
				mHandler.sendMessage(msg);
			}
		};

		// 必须异步调用
		Thread payThread = new Thread(payRunnable);
		payThread.start();
	}
	
	/**
	 * call alipay sdk pay. 调用SDK支付
	 * @param orderInfo 订单数据
	 */
	public void pay(final String orderInfo){
		if(orderInfo==null)
			return;
		Log.i("payInfo", orderInfo);
		Runnable payRunnable = new Runnable() {

			@Override
			public void run() {
				// 构造PayTask 对象
				PayTask alipay = new PayTask(conten);
				// 调用支付接口，获取支付结果
				String result = alipay.pay(orderInfo);
				
				Message msg = new Message();
				msg.what = SDK_PAY_FLAG;
				msg.obj = result;
				mHandler.sendMessage(msg);
			}
		};

		// 必须异步调用
		Thread payThread = new Thread(payRunnable);
		payThread.start();
	}

	/**
	 * check whether the device has authentication alipay account.
	 * 查询终端设备是否存在支付宝认证账户
	 * 
	 */
	public void check(View v) {
		Runnable checkRunnable = new Runnable() {

			@Override
			public void run() {
				// 构造PayTask 对象
				PayTask payTask = new PayTask(conten);
				// 调用查询接口，获取查询结果
				boolean isExist = payTask.checkAccountIfExist();

				Message msg = new Message();
				msg.what = SDK_CHECK_FLAG;
				msg.obj = isExist;
				mHandler.sendMessage(msg);
			}
		};

		Thread checkThread = new Thread(checkRunnable);
		checkThread.start();

	}

	/**
	 * get the sdk version. 获取SDK版本号
	 * 
	 */
	public void getSDKVersion() {
		PayTask payTask = new PayTask(conten);
		String version = payTask.getVersion();
		Toast.makeText(conten, version, Toast.LENGTH_SHORT).show();
	}

	/**
	 * create the order info. 创建订单信息
	 * 
	 */
	public String getOrderInfo(String subject, String body, String price) {
		// 签约合作者身份ID
		String orderInfo = "partner=" + "\"" + PARTNER + "\"";

		// 签约卖家支付宝账号
		orderInfo += "&seller_id=" + "\"" + SELLER + "\"";

		// 商户网站唯一订单号
		if(orderId==null||orderId.equals(""))
			orderId = getOutTradeNo();
		orderInfo += "&out_trade_no=" + "\"" + orderId + "\"";
		 
		// 商品名称
		orderInfo += "&subject=" + "\"" + subject + "\"";

		// 商品详情
		orderInfo += "&body=" + "\"" + body + "\"";

		// 商品金额
		orderInfo += "&total_fee=" + "\"" + price + "\"";

		// 服务器异步通知页面路径
		orderInfo += "&notify_url=" + "\"" + returnUrl
				+ "\"";

		// 服务接口名称， 固定值
		orderInfo += "&service=\"mobile.securitypay.pay\"";

		// 支付类型， 固定值
		orderInfo += "&payment_type=\"1\"";

		// 参数编码， 固定值
		orderInfo += "&_input_charset=\"utf-8\"";

		// 设置未付款交易的超时时间
		// 默认30分钟，一旦超时，该笔交易就会自动被关闭。
		// 取值范围：1m～15d。
		// m-分钟，h-小时，d-天，1c-当天（无论交易何时创建，都在0点关闭）。
		// 该参数数值不接受小数点，如1.5h，可转换为90m。
		orderInfo += "&it_b_pay=\"30m\"";

		// extern_token为经过快登授权获取到的alipay_open_id,带上此参数用户将使用授权的账户进行支付
		// orderInfo += "&extern_token=" + "\"" + extern_token + "\"";

		// 支付宝处理完请求后，当前页面跳转到商户指定页面的路径，可空
		orderInfo += "&return_url=\"m.alipay.com\"";

		// 调用银行卡支付，需配置此参数，参与签名， 固定值 （需要签约《无线银行卡快捷支付》才能使用）
		// orderInfo += "&paymethod=\"expressGateway\"";

		return orderInfo;
	}

	/**
	 * get the out_trade_no for an order. 生成商户订单号，该值在商户端应保持唯一（可自定义格式规范）
	 * 
	 */
	public static String getOutTradeNo() {
		SimpleDateFormat format = new SimpleDateFormat("MMddHHmmss",
				Locale.getDefault());
		Date date = new Date();
		String key = format.format(date);

		Random r = new Random();
		key = key + r.nextInt();
		key = key.substring(0, 15);
		return key;
	}

	/**
	 * sign the order info. 对订单信息进行签名
	 * 
	 * @param content
	 *            待签名订单信息
	 */
	public String sign(String content) {
		return SignUtils.sign(content, RSA_PRIVATE);
	}

	/**
	 * get the sign type we use. 获取签名方式
	 * 
	 */
	public String getSignType() {
		return "sign_type=\"RSA\"";
	}

}

